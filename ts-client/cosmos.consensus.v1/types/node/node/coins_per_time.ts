// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: node/node/coins_per_time.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "node.node";

export interface CoinsPerTime {
  day: string;
  hour: string;
  minute: string;
  second: string;
}

function createBaseCoinsPerTime(): CoinsPerTime {
  return { day: "", hour: "", minute: "", second: "" };
}

export const CoinsPerTime: MessageFns<CoinsPerTime> = {
  encode(message: CoinsPerTime, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.day !== "") {
      writer.uint32(10).string(message.day);
    }
    if (message.hour !== "") {
      writer.uint32(18).string(message.hour);
    }
    if (message.minute !== "") {
      writer.uint32(26).string(message.minute);
    }
    if (message.second !== "") {
      writer.uint32(34).string(message.second);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CoinsPerTime {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCoinsPerTime();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.day = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.hour = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.minute = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.second = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CoinsPerTime {
    return {
      day: isSet(object.day) ? globalThis.String(object.day) : "",
      hour: isSet(object.hour) ? globalThis.String(object.hour) : "",
      minute: isSet(object.minute) ? globalThis.String(object.minute) : "",
      second: isSet(object.second) ? globalThis.String(object.second) : "",
    };
  },

  toJSON(message: CoinsPerTime): unknown {
    const obj: any = {};
    if (message.day !== "") {
      obj.day = message.day;
    }
    if (message.hour !== "") {
      obj.hour = message.hour;
    }
    if (message.minute !== "") {
      obj.minute = message.minute;
    }
    if (message.second !== "") {
      obj.second = message.second;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CoinsPerTime>, I>>(base?: I): CoinsPerTime {
    return CoinsPerTime.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CoinsPerTime>, I>>(object: I): CoinsPerTime {
    const message = createBaseCoinsPerTime();
    message.day = object.day ?? "";
    message.hour = object.hour ?? "";
    message.minute = object.minute ?? "";
    message.second = object.second ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
