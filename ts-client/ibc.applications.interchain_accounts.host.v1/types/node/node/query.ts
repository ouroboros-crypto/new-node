// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: node/node/query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { CoinsPerTime } from "./coins_per_time";
import { Params } from "./params";
import { Posmining } from "./posmining";

export const protobufPackage = "node.node";

/** QueryParamsRequest is request type for the Query/Params RPC method. */
export interface QueryParamsRequest {
}

/** QueryParamsResponse is response type for the Query/Params RPC method. */
export interface QueryParamsResponse {
  /** params holds all the parameters of this module. */
  params: Params | undefined;
}

export interface QueryGetPosminingRequest {
  address: string;
  coin: string;
}

export interface QueryGetPosminingResponse {
  posmining: Posmining | undefined;
  posmined: string;
  coinsPerTime: CoinsPerTime | undefined;
  coin: string;
}

export interface QueryGetProfileRequest {
  address: string;
}

export interface QueryGetProfileResponse {
  owner: string;
  balance: string;
  posmining: QueryGetPosminingResponse | undefined;
}

function createBaseQueryParamsRequest(): QueryParamsRequest {
  return {};
}

export const QueryParamsRequest: MessageFns<QueryParamsRequest> = {
  encode(_: QueryParamsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryParamsRequest {
    return {};
  },

  toJSON(_: QueryParamsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(base?: I): QueryParamsRequest {
    return QueryParamsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(_: I): QueryParamsRequest {
    const message = createBaseQueryParamsRequest();
    return message;
  },
};

function createBaseQueryParamsResponse(): QueryParamsResponse {
  return { params: undefined };
}

export const QueryParamsResponse: MessageFns<QueryParamsResponse> = {
  encode(message: QueryParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryParamsResponse {
    return { params: isSet(object.params) ? Params.fromJSON(object.params) : undefined };
  },

  toJSON(message: QueryParamsResponse): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(base?: I): QueryParamsResponse {
    return QueryParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(object: I): QueryParamsResponse {
    const message = createBaseQueryParamsResponse();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseQueryGetPosminingRequest(): QueryGetPosminingRequest {
  return { address: "", coin: "" };
}

export const QueryGetPosminingRequest: MessageFns<QueryGetPosminingRequest> = {
  encode(message: QueryGetPosminingRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.coin !== "") {
      writer.uint32(18).string(message.coin);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetPosminingRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetPosminingRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.coin = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetPosminingRequest {
    return {
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      coin: isSet(object.coin) ? globalThis.String(object.coin) : "",
    };
  },

  toJSON(message: QueryGetPosminingRequest): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.coin !== "") {
      obj.coin = message.coin;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetPosminingRequest>, I>>(base?: I): QueryGetPosminingRequest {
    return QueryGetPosminingRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetPosminingRequest>, I>>(object: I): QueryGetPosminingRequest {
    const message = createBaseQueryGetPosminingRequest();
    message.address = object.address ?? "";
    message.coin = object.coin ?? "";
    return message;
  },
};

function createBaseQueryGetPosminingResponse(): QueryGetPosminingResponse {
  return { posmining: undefined, posmined: "", coinsPerTime: undefined, coin: "" };
}

export const QueryGetPosminingResponse: MessageFns<QueryGetPosminingResponse> = {
  encode(message: QueryGetPosminingResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.posmining !== undefined) {
      Posmining.encode(message.posmining, writer.uint32(10).fork()).join();
    }
    if (message.posmined !== "") {
      writer.uint32(18).string(message.posmined);
    }
    if (message.coinsPerTime !== undefined) {
      CoinsPerTime.encode(message.coinsPerTime, writer.uint32(26).fork()).join();
    }
    if (message.coin !== "") {
      writer.uint32(34).string(message.coin);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetPosminingResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetPosminingResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.posmining = Posmining.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.posmined = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.coinsPerTime = CoinsPerTime.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.coin = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetPosminingResponse {
    return {
      posmining: isSet(object.posmining) ? Posmining.fromJSON(object.posmining) : undefined,
      posmined: isSet(object.posmined) ? globalThis.String(object.posmined) : "",
      coinsPerTime: isSet(object.coinsPerTime) ? CoinsPerTime.fromJSON(object.coinsPerTime) : undefined,
      coin: isSet(object.coin) ? globalThis.String(object.coin) : "",
    };
  },

  toJSON(message: QueryGetPosminingResponse): unknown {
    const obj: any = {};
    if (message.posmining !== undefined) {
      obj.posmining = Posmining.toJSON(message.posmining);
    }
    if (message.posmined !== "") {
      obj.posmined = message.posmined;
    }
    if (message.coinsPerTime !== undefined) {
      obj.coinsPerTime = CoinsPerTime.toJSON(message.coinsPerTime);
    }
    if (message.coin !== "") {
      obj.coin = message.coin;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetPosminingResponse>, I>>(base?: I): QueryGetPosminingResponse {
    return QueryGetPosminingResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetPosminingResponse>, I>>(object: I): QueryGetPosminingResponse {
    const message = createBaseQueryGetPosminingResponse();
    message.posmining = (object.posmining !== undefined && object.posmining !== null)
      ? Posmining.fromPartial(object.posmining)
      : undefined;
    message.posmined = object.posmined ?? "";
    message.coinsPerTime = (object.coinsPerTime !== undefined && object.coinsPerTime !== null)
      ? CoinsPerTime.fromPartial(object.coinsPerTime)
      : undefined;
    message.coin = object.coin ?? "";
    return message;
  },
};

function createBaseQueryGetProfileRequest(): QueryGetProfileRequest {
  return { address: "" };
}

export const QueryGetProfileRequest: MessageFns<QueryGetProfileRequest> = {
  encode(message: QueryGetProfileRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetProfileRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetProfileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetProfileRequest {
    return { address: isSet(object.address) ? globalThis.String(object.address) : "" };
  },

  toJSON(message: QueryGetProfileRequest): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetProfileRequest>, I>>(base?: I): QueryGetProfileRequest {
    return QueryGetProfileRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetProfileRequest>, I>>(object: I): QueryGetProfileRequest {
    const message = createBaseQueryGetProfileRequest();
    message.address = object.address ?? "";
    return message;
  },
};

function createBaseQueryGetProfileResponse(): QueryGetProfileResponse {
  return { owner: "", balance: "", posmining: undefined };
}

export const QueryGetProfileResponse: MessageFns<QueryGetProfileResponse> = {
  encode(message: QueryGetProfileResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.owner !== "") {
      writer.uint32(10).string(message.owner);
    }
    if (message.balance !== "") {
      writer.uint32(18).string(message.balance);
    }
    if (message.posmining !== undefined) {
      QueryGetPosminingResponse.encode(message.posmining, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetProfileResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetProfileResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.owner = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.balance = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.posmining = QueryGetPosminingResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetProfileResponse {
    return {
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
      balance: isSet(object.balance) ? globalThis.String(object.balance) : "",
      posmining: isSet(object.posmining) ? QueryGetPosminingResponse.fromJSON(object.posmining) : undefined,
    };
  },

  toJSON(message: QueryGetProfileResponse): unknown {
    const obj: any = {};
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    if (message.balance !== "") {
      obj.balance = message.balance;
    }
    if (message.posmining !== undefined) {
      obj.posmining = QueryGetPosminingResponse.toJSON(message.posmining);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetProfileResponse>, I>>(base?: I): QueryGetProfileResponse {
    return QueryGetProfileResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetProfileResponse>, I>>(object: I): QueryGetProfileResponse {
    const message = createBaseQueryGetProfileResponse();
    message.owner = object.owner ?? "";
    message.balance = object.balance ?? "";
    message.posmining = (object.posmining !== undefined && object.posmining !== null)
      ? QueryGetPosminingResponse.fromPartial(object.posmining)
      : undefined;
    return message;
  },
};

/** Query defines the gRPC querier service. */
export interface Query {
  /** Parameters queries the parameters of the module. */
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
  /** Queries a list of GetPosmining items. */
  GetPosmining(request: QueryGetPosminingRequest): Promise<QueryGetPosminingResponse>;
  /** Queries a list of GetProfile items. */
  GetProfile(request: QueryGetProfileRequest): Promise<QueryGetProfileResponse>;
}

export const QueryServiceName = "node.node.Query";
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.Params = this.Params.bind(this);
    this.GetPosmining = this.GetPosmining.bind(this);
    this.GetProfile = this.GetProfile.bind(this);
  }
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse> {
    const data = QueryParamsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Params", data);
    return promise.then((data) => QueryParamsResponse.decode(new BinaryReader(data)));
  }

  GetPosmining(request: QueryGetPosminingRequest): Promise<QueryGetPosminingResponse> {
    const data = QueryGetPosminingRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetPosmining", data);
    return promise.then((data) => QueryGetPosminingResponse.decode(new BinaryReader(data)));
  }

  GetProfile(request: QueryGetProfileRequest): Promise<QueryGetProfileResponse> {
    const data = QueryGetProfileRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetProfile", data);
    return promise.then((data) => QueryGetProfileResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
