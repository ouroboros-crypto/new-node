// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: node/node/profile.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Profile struct {
	Owner     string       `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Balance   uint64       `protobuf:"varint,2,opt,name=balance,proto3" json:"balance,omitempty"`
	Coins     []types.Coin `protobuf:"bytes,3,rep,name=coins,proto3" json:"coins"`
	Posmining *Posmining   `protobuf:"bytes,4,opt,name=posmining,proto3" json:"posmining,omitempty"`
}

func (m *Profile) Reset()         { *m = Profile{} }
func (m *Profile) String() string { return proto.CompactTextString(m) }
func (*Profile) ProtoMessage()    {}
func (*Profile) Descriptor() ([]byte, []int) {
	return fileDescriptor_607f18c4419953e8, []int{0}
}
func (m *Profile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Profile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Profile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Profile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Profile.Merge(m, src)
}
func (m *Profile) XXX_Size() int {
	return m.Size()
}
func (m *Profile) XXX_DiscardUnknown() {
	xxx_messageInfo_Profile.DiscardUnknown(m)
}

var xxx_messageInfo_Profile proto.InternalMessageInfo

func (m *Profile) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Profile) GetBalance() uint64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func (m *Profile) GetCoins() []types.Coin {
	if m != nil {
		return m.Coins
	}
	return nil
}

func (m *Profile) GetPosmining() *Posmining {
	if m != nil {
		return m.Posmining
	}
	return nil
}

func init() {
	proto.RegisterType((*Profile)(nil), "node.node.Profile")
}

func init() { proto.RegisterFile("node/node/profile.proto", fileDescriptor_607f18c4419953e8) }

var fileDescriptor_607f18c4419953e8 = []byte{
	// 280 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x8f, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0x63, 0x9a, 0x52, 0xc5, 0xdd, 0xa2, 0x48, 0xa4, 0x1d, 0x4c, 0xc4, 0x94, 0xa5, 0xb6,
	0x1a, 0xc4, 0x0b, 0x94, 0x81, 0xb5, 0xca, 0xc8, 0x16, 0x07, 0x13, 0x2c, 0x35, 0xbe, 0xc8, 0x4e,
	0x81, 0xbe, 0x05, 0x0f, 0xc1, 0xc3, 0x74, 0xec, 0xc8, 0x84, 0x50, 0xf2, 0x22, 0xc8, 0x71, 0x5b,
	0x58, 0xce, 0xbe, 0xfb, 0x7f, 0xdd, 0x7d, 0x3f, 0xbe, 0x52, 0xf0, 0x24, 0xd8, 0x50, 0x1a, 0x0d,
	0xcf, 0x72, 0x23, 0x68, 0xa3, 0xa1, 0x85, 0x30, 0xb0, 0x33, 0x6a, 0xcb, 0x3c, 0xaa, 0xa0, 0x82,
	0x61, 0xca, 0xec, 0xcf, 0x19, 0xe6, 0xa4, 0x04, 0x53, 0x83, 0x61, 0xbc, 0x30, 0x82, 0xbd, 0x2e,
	0xb9, 0x68, 0x8b, 0x25, 0x2b, 0x41, 0xaa, 0xa3, 0x3e, 0xfb, 0xb7, 0x19, 0x4c, 0x2d, 0x95, 0x54,
	0x95, 0x93, 0x6e, 0x3e, 0x11, 0x9e, 0xac, 0xdd, 0xb5, 0x30, 0xc2, 0x63, 0x78, 0x53, 0x42, 0xc7,
	0x28, 0x41, 0x69, 0x90, 0xbb, 0x26, 0x8c, 0xf1, 0x84, 0x17, 0x9b, 0x42, 0x95, 0x22, 0xbe, 0x48,
	0x50, 0xea, 0xe7, 0xa7, 0x36, 0xbc, 0xc3, 0x63, 0x7b, 0xc4, 0xc4, 0xa3, 0x64, 0x94, 0x4e, 0xb3,
	0x19, 0x75, 0x18, 0xd4, 0x62, 0xd0, 0x23, 0x06, 0xbd, 0x07, 0xa9, 0x56, 0xfe, 0xfe, 0xfb, 0xda,
	0xcb, 0x9d, 0x3b, 0xcc, 0x70, 0x70, 0xa6, 0x88, 0xfd, 0x04, 0xa5, 0xd3, 0x2c, 0xa2, 0xe7, 0x88,
	0x74, 0x7d, 0xd2, 0xf2, 0x3f, 0xdb, 0xea, 0x61, 0xdf, 0x11, 0x74, 0xe8, 0x08, 0xfa, 0xe9, 0x08,
	0xfa, 0xe8, 0x89, 0x77, 0xe8, 0x89, 0xf7, 0xd5, 0x13, 0xef, 0x71, 0x51, 0xc9, 0xf6, 0x65, 0xcb,
	0x69, 0x09, 0x35, 0x83, 0xad, 0x06, 0x0e, 0x1a, 0xcc, 0xa2, 0xd4, 0xbb, 0xa6, 0x05, 0x17, 0xf9,
	0xdd, 0x3d, 0xed, 0xae, 0x11, 0x86, 0x5f, 0x0e, 0xb1, 0x6f, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff,
	0xb2, 0xa3, 0x81, 0xf1, 0x6d, 0x01, 0x00, 0x00,
}

func (m *Profile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Profile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Profile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Posmining != nil {
		{
			size, err := m.Posmining.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProfile(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProfile(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Balance != 0 {
		i = encodeVarintProfile(dAtA, i, uint64(m.Balance))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintProfile(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintProfile(dAtA []byte, offset int, v uint64) int {
	offset -= sovProfile(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Profile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovProfile(uint64(l))
	}
	if m.Balance != 0 {
		n += 1 + sovProfile(uint64(m.Balance))
	}
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovProfile(uint64(l))
		}
	}
	if m.Posmining != nil {
		l = m.Posmining.Size()
		n += 1 + l + sovProfile(uint64(l))
	}
	return n
}

func sovProfile(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProfile(x uint64) (n int) {
	return sovProfile(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Profile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProfile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Profile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Profile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProfile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProfile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			m.Balance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Balance |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProfile
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProfile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, types.Coin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Posmining", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProfile
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProfile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Posmining == nil {
				m.Posmining = &Posmining{}
			}
			if err := m.Posmining.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProfile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProfile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProfile(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProfile
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProfile
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProfile
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProfile
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProfile        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProfile          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProfile = fmt.Errorf("proto: unexpected end of group")
)
