// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: node/node/coins_per_time.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CoinsPerTime struct {
	Day    string `protobuf:"bytes,1,opt,name=day,proto3" json:"day,omitempty"`
	Hour   string `protobuf:"bytes,2,opt,name=hour,proto3" json:"hour,omitempty"`
	Minute string `protobuf:"bytes,3,opt,name=minute,proto3" json:"minute,omitempty"`
	Second string `protobuf:"bytes,4,opt,name=second,proto3" json:"second,omitempty"`
}

func (m *CoinsPerTime) Reset()         { *m = CoinsPerTime{} }
func (m *CoinsPerTime) String() string { return proto.CompactTextString(m) }
func (*CoinsPerTime) ProtoMessage()    {}
func (*CoinsPerTime) Descriptor() ([]byte, []int) {
	return fileDescriptor_48f2a3ba2d5b7cea, []int{0}
}
func (m *CoinsPerTime) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CoinsPerTime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CoinsPerTime.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CoinsPerTime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoinsPerTime.Merge(m, src)
}
func (m *CoinsPerTime) XXX_Size() int {
	return m.Size()
}
func (m *CoinsPerTime) XXX_DiscardUnknown() {
	xxx_messageInfo_CoinsPerTime.DiscardUnknown(m)
}

var xxx_messageInfo_CoinsPerTime proto.InternalMessageInfo

func (m *CoinsPerTime) GetDay() string {
	if m != nil {
		return m.Day
	}
	return ""
}

func (m *CoinsPerTime) GetHour() string {
	if m != nil {
		return m.Hour
	}
	return ""
}

func (m *CoinsPerTime) GetMinute() string {
	if m != nil {
		return m.Minute
	}
	return ""
}

func (m *CoinsPerTime) GetSecond() string {
	if m != nil {
		return m.Second
	}
	return ""
}

func init() {
	proto.RegisterType((*CoinsPerTime)(nil), "node.node.CoinsPerTime")
}

func init() { proto.RegisterFile("node/node/coins_per_time.proto", fileDescriptor_48f2a3ba2d5b7cea) }

var fileDescriptor_48f2a3ba2d5b7cea = []byte{
	// 203 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0xcb, 0xcb, 0x4f, 0x49,
	0xd5, 0x07, 0x13, 0xc9, 0xf9, 0x99, 0x79, 0xc5, 0xf1, 0x05, 0xa9, 0x45, 0xf1, 0x25, 0x99, 0xb9,
	0xa9, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0x9c, 0x20, 0x29, 0x3d, 0x10, 0xa1, 0x94, 0xc2,
	0xc5, 0xe3, 0x0c, 0x52, 0x12, 0x90, 0x5a, 0x14, 0x92, 0x99, 0x9b, 0x2a, 0x24, 0xc0, 0xc5, 0x9c,
	0x92, 0x58, 0x29, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x19, 0x04, 0x62, 0x0a, 0x09, 0x71, 0xb1, 0x64,
	0xe4, 0x97, 0x16, 0x49, 0x30, 0x81, 0x85, 0xc0, 0x6c, 0x21, 0x31, 0x2e, 0xb6, 0xdc, 0xcc, 0xbc,
	0xd2, 0x92, 0x54, 0x09, 0x66, 0xb0, 0x28, 0x94, 0x07, 0x12, 0x2f, 0x4e, 0x4d, 0xce, 0xcf, 0x4b,
	0x91, 0x60, 0x81, 0x88, 0x43, 0x78, 0x4e, 0xee, 0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7,
	0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x84, 0xc7, 0x72, 0x0c, 0x17, 0x1e, 0xcb, 0x31, 0xdc, 0x78, 0x2c,
	0xc7, 0x10, 0xa5, 0x9b, 0x9e, 0x59, 0x92, 0x51, 0x9a, 0xa4, 0x97, 0x9c, 0x9f, 0xab, 0x9f, 0x5f,
	0x5a, 0x94, 0x9f, 0x94, 0x5f, 0x94, 0x5f, 0xac, 0x9b, 0x5c, 0x54, 0x59, 0x50, 0x92, 0x0f, 0xf1,
	0x41, 0x05, 0x84, 0x2a, 0xa9, 0x2c, 0x48, 0x2d, 0x4e, 0x62, 0x03, 0x7b, 0xc0, 0x18, 0x10, 0x00,
	0x00, 0xff, 0xff, 0x2b, 0x46, 0x0f, 0x56, 0xe2, 0x00, 0x00, 0x00,
}

func (m *CoinsPerTime) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CoinsPerTime) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CoinsPerTime) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Second) > 0 {
		i -= len(m.Second)
		copy(dAtA[i:], m.Second)
		i = encodeVarintCoinsPerTime(dAtA, i, uint64(len(m.Second)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Minute) > 0 {
		i -= len(m.Minute)
		copy(dAtA[i:], m.Minute)
		i = encodeVarintCoinsPerTime(dAtA, i, uint64(len(m.Minute)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Hour) > 0 {
		i -= len(m.Hour)
		copy(dAtA[i:], m.Hour)
		i = encodeVarintCoinsPerTime(dAtA, i, uint64(len(m.Hour)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Day) > 0 {
		i -= len(m.Day)
		copy(dAtA[i:], m.Day)
		i = encodeVarintCoinsPerTime(dAtA, i, uint64(len(m.Day)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCoinsPerTime(dAtA []byte, offset int, v uint64) int {
	offset -= sovCoinsPerTime(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CoinsPerTime) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Day)
	if l > 0 {
		n += 1 + l + sovCoinsPerTime(uint64(l))
	}
	l = len(m.Hour)
	if l > 0 {
		n += 1 + l + sovCoinsPerTime(uint64(l))
	}
	l = len(m.Minute)
	if l > 0 {
		n += 1 + l + sovCoinsPerTime(uint64(l))
	}
	l = len(m.Second)
	if l > 0 {
		n += 1 + l + sovCoinsPerTime(uint64(l))
	}
	return n
}

func sovCoinsPerTime(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCoinsPerTime(x uint64) (n int) {
	return sovCoinsPerTime(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CoinsPerTime) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoinsPerTime
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CoinsPerTime: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CoinsPerTime: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Day", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoinsPerTime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoinsPerTime
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoinsPerTime
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Day = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hour", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoinsPerTime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoinsPerTime
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoinsPerTime
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hour = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minute", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoinsPerTime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoinsPerTime
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoinsPerTime
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Minute = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Second", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoinsPerTime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoinsPerTime
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoinsPerTime
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Second = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCoinsPerTime(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCoinsPerTime
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCoinsPerTime(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCoinsPerTime
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCoinsPerTime
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCoinsPerTime
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCoinsPerTime
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCoinsPerTime
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCoinsPerTime
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCoinsPerTime        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCoinsPerTime          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCoinsPerTime = fmt.Errorf("proto: unexpected end of group")
)
